//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Learn")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Learn : global::System.Data.DataSet {
        
        private LearnNodesDataTable tableLearnNodes;
        
        private DocumentsDataTable tableDocuments;
        
        private global::System.Data.DataRelation relationFK_LearnNode_LearnNode;
        
        private global::System.Data.DataRelation relationFK_LearnNodes_Documents;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Learn() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Learn(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LearnNodes"] != null)) {
                    base.Tables.Add(new LearnNodesDataTable(ds.Tables["LearnNodes"]));
                }
                if ((ds.Tables["Documents"] != null)) {
                    base.Tables.Add(new DocumentsDataTable(ds.Tables["Documents"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LearnNodesDataTable LearnNodes {
            get {
                return this.tableLearnNodes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DocumentsDataTable Documents {
            get {
                return this.tableDocuments;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Learn cln = ((Learn)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LearnNodes"] != null)) {
                    base.Tables.Add(new LearnNodesDataTable(ds.Tables["LearnNodes"]));
                }
                if ((ds.Tables["Documents"] != null)) {
                    base.Tables.Add(new DocumentsDataTable(ds.Tables["Documents"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLearnNodes = ((LearnNodesDataTable)(base.Tables["LearnNodes"]));
            if ((initTable == true)) {
                if ((this.tableLearnNodes != null)) {
                    this.tableLearnNodes.InitVars();
                }
            }
            this.tableDocuments = ((DocumentsDataTable)(base.Tables["Documents"]));
            if ((initTable == true)) {
                if ((this.tableDocuments != null)) {
                    this.tableDocuments.InitVars();
                }
            }
            this.relationFK_LearnNode_LearnNode = this.Relations["FK_LearnNode_LearnNode"];
            this.relationFK_LearnNodes_Documents = this.Relations["FK_LearnNodes_Documents"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Learn";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Learn.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLearnNodes = new LearnNodesDataTable();
            base.Tables.Add(this.tableLearnNodes);
            this.tableDocuments = new DocumentsDataTable();
            base.Tables.Add(this.tableDocuments);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_LearnNode_LearnNode", new global::System.Data.DataColumn[] {
                        this.tableLearnNodes.LearnNodeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLearnNodes.ParentIdColumn});
            this.tableLearnNodes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_LearnNodes_Documents", new global::System.Data.DataColumn[] {
                        this.tableLearnNodes.LearnNodeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDocuments.LearnNodeIdColumn});
            this.tableDocuments.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_LearnNode_LearnNode = new global::System.Data.DataRelation("FK_LearnNode_LearnNode", new global::System.Data.DataColumn[] {
                        this.tableLearnNodes.LearnNodeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLearnNodes.ParentIdColumn}, false);
            this.Relations.Add(this.relationFK_LearnNode_LearnNode);
            this.relationFK_LearnNodes_Documents = new global::System.Data.DataRelation("FK_LearnNodes_Documents", new global::System.Data.DataColumn[] {
                        this.tableLearnNodes.LearnNodeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDocuments.LearnNodeIdColumn}, false);
            this.Relations.Add(this.relationFK_LearnNodes_Documents);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLearnNodes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDocuments() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Learn ds = new Learn();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LearnNodesRowChangeEventHandler(object sender, LearnNodesRowChangeEvent e);
        
        public delegate void DocumentsRowChangeEventHandler(object sender, DocumentsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LearnNodesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLearnNodeId;
            
            private global::System.Data.DataColumn columnLearnNodeName;
            
            private global::System.Data.DataColumn columnLearnNodeDesc;
            
            private global::System.Data.DataColumn columnParentId;
            
            private global::System.Data.DataColumn columnNumberOfDocuments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesDataTable() {
                this.TableName = "LearnNodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnNodesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LearnNodesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LearnNodeIdColumn {
                get {
                    return this.columnLearnNodeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LearnNodeNameColumn {
                get {
                    return this.columnLearnNodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LearnNodeDescColumn {
                get {
                    return this.columnLearnNodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentIdColumn {
                get {
                    return this.columnParentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfDocumentsColumn {
                get {
                    return this.columnNumberOfDocuments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow this[int index] {
                get {
                    return ((LearnNodesRow)(this.Rows[index]));
                }
            }
            
            public event LearnNodesRowChangeEventHandler LearnNodesRowChanging;
            
            public event LearnNodesRowChangeEventHandler LearnNodesRowChanged;
            
            public event LearnNodesRowChangeEventHandler LearnNodesRowDeleting;
            
            public event LearnNodesRowChangeEventHandler LearnNodesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLearnNodesRow(LearnNodesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow AddLearnNodesRow(int LearnNodeId, string LearnNodeName, string LearnNodeDesc, LearnNodesRow parentLearnNodesRowByFK_LearnNode_LearnNode, int NumberOfDocuments) {
                LearnNodesRow rowLearnNodesRow = ((LearnNodesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LearnNodeId,
                        LearnNodeName,
                        LearnNodeDesc,
                        null,
                        NumberOfDocuments};
                if ((parentLearnNodesRowByFK_LearnNode_LearnNode != null)) {
                    columnValuesArray[3] = parentLearnNodesRowByFK_LearnNode_LearnNode[0];
                }
                rowLearnNodesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLearnNodesRow);
                return rowLearnNodesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow FindByLearnNodeId(int LearnNodeId) {
                return ((LearnNodesRow)(this.Rows.Find(new object[] {
                            LearnNodeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LearnNodesDataTable cln = ((LearnNodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LearnNodesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLearnNodeId = base.Columns["LearnNodeId"];
                this.columnLearnNodeName = base.Columns["LearnNodeName"];
                this.columnLearnNodeDesc = base.Columns["LearnNodeDesc"];
                this.columnParentId = base.Columns["ParentId"];
                this.columnNumberOfDocuments = base.Columns["NumberOfDocuments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLearnNodeId = new global::System.Data.DataColumn("LearnNodeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLearnNodeId);
                this.columnLearnNodeName = new global::System.Data.DataColumn("LearnNodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLearnNodeName);
                this.columnLearnNodeDesc = new global::System.Data.DataColumn("LearnNodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLearnNodeDesc);
                this.columnParentId = new global::System.Data.DataColumn("ParentId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentId);
                this.columnNumberOfDocuments = new global::System.Data.DataColumn("NumberOfDocuments", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfDocuments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLearnNodeId}, true));
                this.columnLearnNodeId.AllowDBNull = false;
                this.columnLearnNodeId.Unique = true;
                this.columnLearnNodeName.AllowDBNull = false;
                this.columnLearnNodeDesc.AllowDBNull = false;
                this.columnNumberOfDocuments.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow NewLearnNodesRow() {
                return ((LearnNodesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LearnNodesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LearnNodesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LearnNodesRowChanged != null)) {
                    this.LearnNodesRowChanged(this, new LearnNodesRowChangeEvent(((LearnNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LearnNodesRowChanging != null)) {
                    this.LearnNodesRowChanging(this, new LearnNodesRowChangeEvent(((LearnNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LearnNodesRowDeleted != null)) {
                    this.LearnNodesRowDeleted(this, new LearnNodesRowChangeEvent(((LearnNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LearnNodesRowDeleting != null)) {
                    this.LearnNodesRowDeleting(this, new LearnNodesRowChangeEvent(((LearnNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLearnNodesRow(LearnNodesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Learn ds = new Learn();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LearnNodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DocumentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDocumentId;
            
            private global::System.Data.DataColumn columnDocumentAddress;
            
            private global::System.Data.DataColumn columnDocumentName;
            
            private global::System.Data.DataColumn columnDocumentDesc;
            
            private global::System.Data.DataColumn columnSort_Order;
            
            private global::System.Data.DataColumn columnLearnNodeId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsDataTable() {
                this.TableName = "Documents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DocumentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentIdColumn {
                get {
                    return this.columnDocumentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentAddressColumn {
                get {
                    return this.columnDocumentAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNameColumn {
                get {
                    return this.columnDocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDescColumn {
                get {
                    return this.columnDocumentDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sort_OrderColumn {
                get {
                    return this.columnSort_Order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LearnNodeIdColumn {
                get {
                    return this.columnLearnNodeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsRow this[int index] {
                get {
                    return ((DocumentsRow)(this.Rows[index]));
                }
            }
            
            public event DocumentsRowChangeEventHandler DocumentsRowChanging;
            
            public event DocumentsRowChangeEventHandler DocumentsRowChanged;
            
            public event DocumentsRowChangeEventHandler DocumentsRowDeleting;
            
            public event DocumentsRowChangeEventHandler DocumentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDocumentsRow(DocumentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsRow AddDocumentsRow(int DocumentId, string DocumentAddress, string DocumentName, string DocumentDesc, int Sort_Order, LearnNodesRow parentLearnNodesRowByFK_LearnNodes_Documents) {
                DocumentsRow rowDocumentsRow = ((DocumentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DocumentId,
                        DocumentAddress,
                        DocumentName,
                        DocumentDesc,
                        Sort_Order,
                        null};
                if ((parentLearnNodesRowByFK_LearnNodes_Documents != null)) {
                    columnValuesArray[5] = parentLearnNodesRowByFK_LearnNodes_Documents[0];
                }
                rowDocumentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDocumentsRow);
                return rowDocumentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsRow FindByDocumentIdSort_OrderLearnNodeId(int DocumentId, int Sort_Order, int LearnNodeId) {
                return ((DocumentsRow)(this.Rows.Find(new object[] {
                            DocumentId,
                            Sort_Order,
                            LearnNodeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DocumentsDataTable cln = ((DocumentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DocumentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDocumentId = base.Columns["DocumentId"];
                this.columnDocumentAddress = base.Columns["DocumentAddress"];
                this.columnDocumentName = base.Columns["DocumentName"];
                this.columnDocumentDesc = base.Columns["DocumentDesc"];
                this.columnSort_Order = base.Columns["Sort_Order"];
                this.columnLearnNodeId = base.Columns["LearnNodeId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDocumentId = new global::System.Data.DataColumn("DocumentId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentId);
                this.columnDocumentAddress = new global::System.Data.DataColumn("DocumentAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentAddress);
                this.columnDocumentName = new global::System.Data.DataColumn("DocumentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentName);
                this.columnDocumentDesc = new global::System.Data.DataColumn("DocumentDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDesc);
                this.columnSort_Order = new global::System.Data.DataColumn("Sort_Order", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSort_Order);
                this.columnLearnNodeId = new global::System.Data.DataColumn("LearnNodeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLearnNodeId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDocumentId,
                                this.columnSort_Order,
                                this.columnLearnNodeId}, true));
                this.columnDocumentId.AllowDBNull = false;
                this.columnDocumentAddress.AllowDBNull = false;
                this.columnDocumentName.AllowDBNull = false;
                this.columnDocumentDesc.AllowDBNull = false;
                this.columnSort_Order.AllowDBNull = false;
                this.columnLearnNodeId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsRow NewDocumentsRow() {
                return ((DocumentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DocumentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DocumentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DocumentsRowChanged != null)) {
                    this.DocumentsRowChanged(this, new DocumentsRowChangeEvent(((DocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DocumentsRowChanging != null)) {
                    this.DocumentsRowChanging(this, new DocumentsRowChangeEvent(((DocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DocumentsRowDeleted != null)) {
                    this.DocumentsRowDeleted(this, new DocumentsRowChangeEvent(((DocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DocumentsRowDeleting != null)) {
                    this.DocumentsRowDeleting(this, new DocumentsRowChangeEvent(((DocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDocumentsRow(DocumentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Learn ds = new Learn();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DocumentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LearnNodesRow : global::System.Data.DataRow {
            
            private LearnNodesDataTable tableLearnNodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LearnNodesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLearnNodes = ((LearnNodesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LearnNodeId {
                get {
                    return ((int)(this[this.tableLearnNodes.LearnNodeIdColumn]));
                }
                set {
                    this[this.tableLearnNodes.LearnNodeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LearnNodeName {
                get {
                    return ((string)(this[this.tableLearnNodes.LearnNodeNameColumn]));
                }
                set {
                    this[this.tableLearnNodes.LearnNodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LearnNodeDesc {
                get {
                    return ((string)(this[this.tableLearnNodes.LearnNodeDescColumn]));
                }
                set {
                    this[this.tableLearnNodes.LearnNodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentId {
                get {
                    try {
                        return ((int)(this[this.tableLearnNodes.ParentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentId\' in table \'LearnNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLearnNodes.ParentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfDocuments {
                get {
                    return ((int)(this[this.tableLearnNodes.NumberOfDocumentsColumn]));
                }
                set {
                    this[this.tableLearnNodes.NumberOfDocumentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow LearnNodesRowParent {
                get {
                    return ((LearnNodesRow)(this.GetParentRow(this.Table.ParentRelations["FK_LearnNode_LearnNode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LearnNode_LearnNode"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentIdNull() {
                return this.IsNull(this.tableLearnNodes.ParentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentIdNull() {
                this[this.tableLearnNodes.ParentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsRow[] GetDocumentsRows() {
                if ((this.Table.ChildRelations["FK_LearnNodes_Documents"] == null)) {
                    return new DocumentsRow[0];
                }
                else {
                    return ((DocumentsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LearnNodes_Documents"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow[] GetLearnNodesRows() {
                if ((this.Table.ChildRelations["FK_LearnNode_LearnNode"] == null)) {
                    return new LearnNodesRow[0];
                }
                else {
                    return ((LearnNodesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LearnNode_LearnNode"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DocumentsRow : global::System.Data.DataRow {
            
            private DocumentsDataTable tableDocuments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDocuments = ((DocumentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentId {
                get {
                    return ((int)(this[this.tableDocuments.DocumentIdColumn]));
                }
                set {
                    this[this.tableDocuments.DocumentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentAddress {
                get {
                    return ((string)(this[this.tableDocuments.DocumentAddressColumn]));
                }
                set {
                    this[this.tableDocuments.DocumentAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentName {
                get {
                    return ((string)(this[this.tableDocuments.DocumentNameColumn]));
                }
                set {
                    this[this.tableDocuments.DocumentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentDesc {
                get {
                    return ((string)(this[this.tableDocuments.DocumentDescColumn]));
                }
                set {
                    this[this.tableDocuments.DocumentDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sort_Order {
                get {
                    return ((int)(this[this.tableDocuments.Sort_OrderColumn]));
                }
                set {
                    this[this.tableDocuments.Sort_OrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LearnNodeId {
                get {
                    return ((int)(this[this.tableDocuments.LearnNodeIdColumn]));
                }
                set {
                    this[this.tableDocuments.LearnNodeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow LearnNodesRow {
                get {
                    return ((LearnNodesRow)(this.GetParentRow(this.Table.ParentRelations["FK_LearnNodes_Documents"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LearnNodes_Documents"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LearnNodesRowChangeEvent : global::System.EventArgs {
            
            private LearnNodesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRowChangeEvent(LearnNodesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LearnNodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DocumentsRowChangeEvent : global::System.EventArgs {
            
            private DocumentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsRowChangeEvent(DocumentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591